{"version":3,"sources":["actions/index.tsx","components/header.tsx","components/quantity-modifier.tsx","containers/header-container.tsx","containers/quantity-modifier-container.tsx","components/list.tsx","containers/list-container.tsx","components/filters.tsx","containers/filters-container.tsx","App.tsx","containers/App-container.tsx","serviceWorker.ts","reducers/toggle-view.tsx","reducers/product-lists.tsx","reducers/index.tsx","reducers/cartHandler.tsx","reducers/categoryHandler.tsx","index.tsx"],"names":["viewEnum","toggleView","type","modifyItemInCart","product","setCategory","categoryTarget","Header","ButtonType","ChangeQuantity","dispatch","className","src","alt","onClick","connect","ItemQuantityModifier","props","state","quantity","view","LISTING","quantityChangeHandler","bind","buttonHandler","e","newQuantity","this","ADD","SUBTRACT","VALUE","input","target","value","length","match","parseInt","CART","productInfo","setState","price","unit","style","backgroundColor","colorHex","onChange","onBlur","AddButton","RemoveButton","React","Component","ListItem","nameText","CartList","cartLists","total","map","key","category","nameIndex","toFixed","ProductList","productLists","List","item","activeCategory","isActive","push","name","filter","indexOf","categoryText","FilterItem","activeStyle","hexColor","border","inactiveStyle","color","Filters","App","productList","localStorage","getItem","products","JSON","parse","categoryTexts","i","parseFloat","Math","random","setItem","stringify","getProducts","storeState","store","getState","categoryArray","thisCategoryName","isCategoryExisted","splice","categories","getCategories","console","log","Boolean","window","location","hostname","action","cartHandler","isUpdatingExistingItem","updatedState","categoryHandler","combineReducers","createStore","rootReducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.907c74d3.chunk.js","sourcesContent":["import { store } from \"../index\";\n\nexport interface ProductInfo {\n    category: number;\n    categoryText: string;\n    nameIndex: number;\n    nameText: string;\n    price: number;\n    unit: string;\n    colorHex: string;\n}\n\nexport interface ProductInfoInCart {\n    productInfo: ProductInfo;\n    quantity: number;\n}\n\nexport enum viewEnum {\n    LISTING = 'LISTING',\n    CART = 'CART'\n}\n\n// export interface StoreState {\n//     productLists: Array<ProductForListing>;\n//     cartItems: Array<ProductInCart>;\n//     view: viewEnum;\n// }\n\nexport const getProducts = () => {\n    const productList = localStorage.getItem('productList');\n    const products: Array<ProductInfo> = [];\n    if (!productList) {\n        const categoryTexts = ['fruit', 'vegetable', 'dairy', 'soft drink'];\n        const unit = ['lbs', 'lbs', 'box', 'can'];\n        const colorHex = ['FFB74D', 'FF8A65', '81C784', '4FC3F7'];\n        for (let category=0; category<4; category++) {\n            for (let i=0; i<10; i++) {\n                products.push({\n                    category: category,\n                    categoryText: categoryTexts[category],\n                    nameIndex: i,\n                    nameText: `${categoryTexts[category]}-${i}`,\n                    price: parseFloat((Math.random() * 100).toFixed(2)),\n                    unit: unit[category],\n                    colorHex: colorHex[category]\n                })\n            }\n        }\n        localStorage.setItem('productList', JSON.stringify({productList: products}));\n    } else {\n        JSON.parse(productList).productList.map((item: ProductInfo) => {\n            products.push(item)\n        })\n    }\n\n    return {\n        type: 'GET_PRODUCTS',\n        products\n    }\n\n};\n\nexport const toggleView = () => {\n    return {\n        type: 'TOGGLE_VIEW'\n    }\n};\n\n// export const restoreCart = () => {\n//     let cartList = localStorage.getItem('cartList');\n//     const array: Array<ProductInfoInCart> = [];\n//     if (cartList) {\n//         cartList = JSON.parse(cartList).cartList;\n//         cartList.map((item: ProductInfoInCart) => {\n//             array.push(item)\n//         })\n//     }\n//     return  {\n//         type: 'RESTORE_CART' as string,\n//         cartList: array\n//     }\n// };\n\n\nexport const addToCart = (product: ProductInfoInCart) => {\n    // the process of add an item from listing to cart (always add)\n    return  {\n        type: 'ADD_TO_CART' as string,\n        product: product as ProductInfoInCart\n    }\n};\n\nexport const modifyItemInCart = (product: ProductInfoInCart) => {\n    // the process of modify item quantity in cart view\n    return  {\n        type: 'MODIFY_ITEM_IN_CART' as string,\n        product: product as ProductInfoInCart\n    }\n};\n\nexport interface Category {\n    name: string,\n    isActive: boolean,\n    hexColor: string\n}\n\nexport const getCategories = () => {\n    const storeState = store.getState();\n    const view = storeState.view;\n\n    const productLists = view === viewEnum.LISTING\n        ? storeState.productLists\n        : storeState.cartLists;\n    const categoryNameArray: Array<string> = [];\n    const categoryArray: Array<Category> = [];\n    productLists.map((item: ProductInfo) => {\n        const thisCategoryName = item.categoryText;\n        let isCategoryExisted = false;\n        categoryArray.map((category) => {\n            if (category.name === thisCategoryName) {\n                isCategoryExisted = true;\n                return false;\n            }\n        });\n        if (!isCategoryExisted) {\n            categoryArray.push({\n                name: thisCategoryName,\n                isActive: false,\n                hexColor: item.colorHex\n            })\n        }\n    });\n    categoryArray.splice(0, 0, {\n        name: 'all',\n        isActive: true,\n        hexColor: '1E88E5'\n    });\n\n  return {\n      type: 'GET_CATEGORIES',\n      categories: categoryArray\n  }\n};\n\nexport const setCategory = (categoryTarget: string) => {\n    return {\n        type: 'SET_CATEGORY',\n        categoryTarget: categoryTarget\n    }\n};","import React from \"react\";\nimport './header.css';\nimport { toggleView } from \"../actions\";\n\ninterface HeaderProps {\n    dispatch: any\n}\n\nfunction Header({dispatch} : HeaderProps) {\n    return (\n        <div className='header'>\n            <div>\n                <div className={'shopping-cart-icon'}>\n                    <img src='./icons/cart-empty.svg' className={'header-cart-icon'} alt={'shopping-cart'} onClick={() => dispatch(toggleView())}/>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Header;","import React from \"react\";\nimport {addToCart, modifyItemInCart, ProductInfo, viewEnum} from \"../actions\";\nimport './list.css';\n\ninterface IProps {\n    productInfo: ProductInfo\n    view: viewEnum,\n    dispatch: any,\n    quantity: number\n}\n\ninterface IState {\n    quantity: number,\n}\n\nenum ButtonType {\n    CONFIRM = 'CONFIRM',\n    REMOVE = 'REMOVE'\n}\n\nenum ChangeQuantity {\n    ADD = 'ADD',\n    SUBTRACT = 'SUBTRACT',\n    VALUE = 'VALUE'\n}\n\nexport default class ItemQuantityModifier extends React.Component<IProps, IState> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            quantity: this.props.view === viewEnum.LISTING ? 0 : this.props.quantity\n        };\n        this.quantityChangeHandler = this.quantityChangeHandler.bind(this);\n        this.buttonHandler = this.buttonHandler.bind(this);\n    }\n\n    quantityChangeHandler(e: React.SyntheticEvent, type: ChangeQuantity) {\n        let newQuantity = this.state.quantity;\n        switch (type) {\n            case ChangeQuantity.ADD:\n                newQuantity++;\n                break;\n            case ChangeQuantity.SUBTRACT:\n                newQuantity = newQuantity === 0 ? newQuantity : newQuantity - 1;\n                break;\n            case ChangeQuantity.VALUE:\n                const input: string = (e.target as HTMLTextAreaElement).value;\n                if (input.length === 0) {\n                    newQuantity = -1;\n                } else if (!input.match(/[^0-9]/ig)) {\n                    newQuantity = parseInt(input);\n                }\n                break;\n            default:\n                break;\n        }\n        if (this.props.view === viewEnum.CART) {\n            this.props.dispatch(modifyItemInCart({\n                productInfo: {...this.props.productInfo},\n                quantity: newQuantity\n            }));\n        }\n\n        this.setState({\n            quantity: newQuantity\n        })\n    }\n\n    buttonHandler() {\n        if (this.props.view === viewEnum.LISTING) {\n            this.props.dispatch(addToCart({\n                productInfo: {...this.props.productInfo},\n                quantity: this.state.quantity\n            }));\n        } else if (this.props.view === viewEnum.CART) {\n            this.props.dispatch(modifyItemInCart({\n                productInfo: {...this.props.productInfo},\n                quantity: 0\n            }));\n        }\n        this.setState({quantity: 0});\n    }\n\n    render() {\n        return (\n            <div className={'item-quantity-modifier-wrapper'}>\n                <div className={'item-quantity-modifier-column-quarter'}>\n                    ${this.props.productInfo.price} / {this.props.productInfo.unit}\n                </div>\n                <div className={'item-quantity-modifier-column-half'}>\n                    <div className={'item-quantity-modifier-subtract'} onClick={(e) => this.quantityChangeHandler(e, ChangeQuantity.SUBTRACT)}>-</div>\n                    <input\n                        className={'item-quantity-modifier-input'}\n                        style={{backgroundColor: `#${this.props.productInfo.colorHex}`}}\n                        type='text'\n                        value={this.state.quantity === -1 ? '' : this.state.quantity}\n                        onChange={(e) => this.quantityChangeHandler(e, ChangeQuantity.VALUE)}\n                        onBlur={() => this.state.quantity === -1 ? this.setState({quantity: 0}) : null}\n                    />\n                    <div className={'item-quantity-modifier-add'} onClick={(e) => this.quantityChangeHandler(e, ChangeQuantity.ADD)}>+</div>\n                    <div className={'item-quantity-modifier-unit'}> { this.props.productInfo.unit } </div>\n                </div>\n                <div className={'item-quantity-modifier-column-quarter'} onClick={this.buttonHandler}>\n                    <div>\n                    </div>\n                    { this.props.view === viewEnum.LISTING ? <AddButton /> : <RemoveButton /> }\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction AddButton() {\n    return (\n        <div className={'item-quantity-modifier-add-button'}>\n            ADD\n        </div>\n    )\n}\n\nfunction RemoveButton() {\n    return (\n        <div className={'item-quantity-modifier-remove-button'}>\n            REMOVE\n        </div>\n    )\n}","import Header from \"../components/header\";\nimport { connect } from \"react-redux\";\n\nconst mapDispatchToProps = ( dispatch: any ) => {\n    return {\n        dispatch: dispatch\n    }\n};\n\nexport default connect (\n    mapDispatchToProps\n)(Header);","import ItemQuantityModifier from \"../components/quantity-modifier\";\nimport { connect } from \"react-redux\";\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        dispatch\n    }\n};\n\nexport default connect(\n    mapDispatchToProps\n)(ItemQuantityModifier)","import React, { useState } from 'react';\nimport './list.css';\nimport ItemQuantityModifierContainer from '../containers/quantity-modifier-container';\nimport { ProductInfo, ProductInfoInCart } from \"../actions\";\nimport { viewEnum } from \"../actions\";\n\n\nfunction ListItem(props: any) {\n    return (\n        <div className='list-item-wrapper' style={{backgroundColor: `#${props.productInfo.colorHex}`}}>\n            <div className={'list-item-name list-item-row-wrapper'}>\n                { props.productInfo.nameText }\n            </div>\n            <div className={'list-item-image list-item-row-wrapper'}>\n                picture\n            </div>\n            <div className={'list-item-description list-item-row-wrapper'}>\n                description\n            </div>\n            <div className={'list-item-quantity list-item-row-wrapper'}>\n                <ItemQuantityModifierContainer productInfo={props.productInfo} view={props.view} quantity={props.quantity}/>\n            </div>\n        </div>\n    )\n}\n\ninterface CartListProps {\n    cartLists: Array<ProductInfoInCart>,\n    total: number\n}\n\nfunction CartList( { cartLists, total }: CartListProps) {\n    return (\n        <div className={'list-wrapper'}>\n            <div className={'list-heading'}>\n                Your Shopping Cart\n            </div>\n            {cartLists ?  cartLists.map((product: ProductInfoInCart) => {\n                    return (\n                        <ListItem productInfo={product.productInfo} view={viewEnum.CART} quantity={product.quantity} key={`${product.productInfo.category}-${product.productInfo.nameIndex}`} />\n                    )\n                })\n                : null\n            }\n            <div className={'list-price-total'}>\n                    Total: ${total.toFixed(2)}\n            </div>\n        </div>\n    )\n}\n\ninterface ProductListProps {\n    productLists: any,\n}\n\nfunction ProductList({productLists} : ProductListProps) {\n    return (\n        <div className={'list-wrapper'}>\n            {productLists ?  productLists.map((product: ProductInfo) => {\n                    return (\n                        <ListItem\n                            productInfo={product}\n                            view={viewEnum.LISTING}\n                            quantity={0}\n                            key={`${product.category}-${product.nameIndex}`}/>\n                    )\n                })\n                : null\n            }\n        </div>\n    )\n}\n\nexport interface ListPropsType {\n    productLists: Array<ProductInfo>,\n    view: viewEnum,\n    cartLists: Array<ProductInfoInCart>,\n    total: number\n}\n\nfunction List({ productLists, view, cartLists, total } : ListPropsType) {\n    return view === 'LISTING' ? <ProductList productLists={productLists}/> : <CartList cartLists={cartLists} total={total}/>\n}\n\n\nexport default List","import List from \"../components/list\";\nimport { connect } from \"react-redux\";\nimport { ListPropsType } from \"../components/list\";\nimport { ProductInfo, ProductInfoInCart } from \"../actions\";\nimport { viewEnum } from \"../actions\";\nimport { Category } from \"../actions\";\n\nconst mapStateToProps = (state: any): ListPropsType => {\n    // calc total price\n    let total = 0;\n    state.cartLists.map((item: ProductInfoInCart): void => {\n        total += item.productInfo.price * item.quantity;\n    });\n    // apply filter\n    const productLists = state.productLists;\n    const cartLists = state.cartLists;\n    const view = state.view;\n    const category = state.category;\n    const activeCategory: Array<string> = [];\n    if (category.length && !category[0].isActive) {\n        // if not showing all categories\n        category.map((category: Category) => {\n            if (category.isActive) activeCategory.push(category.name)\n        });\n    } else {\n        category.map((category: Category) => activeCategory.push(category.name));\n    }\n\n    if (view === viewEnum.LISTING) {\n        const filteredProductLists = productLists.filter((item: ProductInfo) => {\n            return activeCategory.indexOf(item.categoryText) !== -1\n        });\n        return {\n            productLists: filteredProductLists,\n            view,\n            cartLists,\n            total: total\n        }\n    } else {\n        const filteredCartLists = cartLists.filter((item: ProductInfoInCart) => {\n            return activeCategory.indexOf(item.productInfo.categoryText) !== -1\n        });\n        return {\n            productLists: productLists,\n            view,\n            cartLists: filteredCartLists,\n            total: total\n        }\n    }\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        dispatch\n    }\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(List);","import React from \"react\";\nimport './filters.css';\n\nimport { Category } from \"../actions\";\nimport { setCategory } from \"../actions\";\n\ninterface FilterItemProps {\n    category: Category,\n    dispatch: any\n}\n\nfunction FilterItem({ category, dispatch }: FilterItemProps) {\n    const activeStyle = {\n        backgroundColor: `#${category.hexColor}`,\n        border: `2px solid rgba(0,0,0,0)`,\n    };\n    const inactiveStyle = {\n        border: `2px solid #${category.hexColor}`,\n        color: `#${category.hexColor}`,\n    };\n    return (\n        <div\n            className={'filter-item'}\n            style={category.isActive ? {...activeStyle} : {...inactiveStyle}}\n            onClick={() => {dispatch(setCategory(category.name))}}\n        >\n            { category.name }\n        </div>\n    )\n}\n\ninterface FiltersProps {\n    category: Array<Category>,\n    dispatch: any\n}\n\nfunction Filters({ category, dispatch }: FiltersProps) {\n    return (\n        <div className={'filters-wrapper'}>\n            {\n                category ? category.map((category: Category) => {\n                    return <FilterItem category={category} dispatch={dispatch} key={category.name}/>\n                }) : null\n            }\n        </div>\n    )\n}\n\nexport default Filters;","import { connect } from \"react-redux\";\nimport Filters from \"../components/filters\";\nimport { Category } from \"../actions\";\n\nconst mapStateToProps = (state: any) => {\n    return {\n        category: state.category as Array<Category>\n    }\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        dispatch\n    }\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Filters)","import React from 'react';\nimport './App.css';\n\nimport HeaderContainer from './containers/header-container';\nimport ListContainer from './containers/list-container';\nimport FilterContainer from './containers/filters-container';\n\nimport { getProducts } from \"./actions\";\nimport { getCategories } from \"./actions\";\nimport { DispatchType } from \"./index\";\nimport { store } from \"./index\";\n\n\ninterface AppProps {\n    dispatch: DispatchType\n}\n\ninterface AppState {\n\n}\n\nclass App extends React.Component<AppProps, AppState> {\n\n    dispatch: DispatchType;\n\n    constructor({ dispatch }: AppProps) {\n        super({ dispatch });\n        this.dispatch = dispatch;\n    }\n\n    componentDidMount() {\n        this.dispatch(getProducts());\n        this.dispatch(getCategories());\n    }\n\n    componentDidUpdate() {\n        console.log(store.getState())\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <HeaderContainer />\n                <div className={'app-body-wrapper'}>\n                    <FilterContainer />\n                    <ListContainer />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import App from '../App';\nimport { connect } from \"react-redux\";\nimport { DispatchType } from \"../index\";\n\nconst mapDispatchToProps = (dispatch: DispatchType) => {\n    return { dispatch };\n};\n\nexport default connect(\n    mapDispatchToProps\n)(App)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","enum viewEnum {\n    LISTING = 'LISTING',\n    CART = 'CART'\n}\n\nconst toggleView = (state: string = viewEnum.LISTING, action: any) => {\n    if (action.type === 'TOGGLE_VIEW') {\n        return state === viewEnum.LISTING ? viewEnum.CART : viewEnum.LISTING;\n    }\n    return state;\n};\n\nexport default toggleView","export interface ProductForListing {\n    category: number;\n    categoryText: string;\n    nameIndex: number;\n    nameText: string;\n    price: number;\n    unit: string;\n    colorHex: string;\n}\n\nconst productLists = (state: Array<any> = [], action: any) => {\n    switch(action.type) {\n        case 'GET_PRODUCTS':\n            return [...action.products];\n        default:\n            return state;\n    }\n};\n\nexport default productLists;","import { combineReducers } from 'redux';\nimport productLists from \"./product-lists\";\nimport toggleView from \"./toggle-view\";\nimport cartHandler from \"./cartHandler\";\nimport categoryHandler from \"./categoryHandler\";\n\nexport interface ProductForListing {\n    category: number;\n    categoryText: string;\n    nameIndex: number;\n    nameText: string;\n    price: number;\n    unit: string;\n    colorHex: string;\n}\n\nexport interface ProductInCart extends ProductForListing {\n    quantity: number\n}\n\nenum viewEnum {\n    LISTING = 'LISTING',\n    CART = 'CART'\n}\n\nexport interface StoreState {\n    productLists: Array<ProductForListing>;\n    cartItems: Array<ProductInCart>;\n    view: viewEnum;\n}\n\n\nexport default combineReducers({\n    productLists: productLists,\n    view: toggleView,\n    cartLists: cartHandler,\n    category: categoryHandler\n})","import { ProductInfoInCart } from \"../actions\";\n\nconst cartHandler = (state: Array<ProductInfoInCart> = [], action: any) => {\n    switch (action.type) {\n        case 'ADD_TO_CART':\n            let isUpdatingExistingItem = false;\n            const updatedState = state.map(item => {\n                if (\n                    item.productInfo.category === action.product.productInfo.category &&\n                    item.productInfo.nameIndex === action.product.productInfo.nameIndex\n                ) {\n                    isUpdatingExistingItem = true;\n                    item.quantity += action.product.quantity;\n                }\n\n                return item;\n            });\n\n            return isUpdatingExistingItem ? updatedState : [...state, action.product];\n            break;\n\n        case 'MODIFY_ITEM_IN_CART':\n            if (action.product.quantity === 0) {\n                const updatedState = state.filter(item => {\n                    return !(\n                        item.productInfo.category === action.product.productInfo.category &&\n                        item.productInfo.nameIndex === action.product.productInfo.nameIndex\n                    )\n                });\n                return updatedState;\n            } else {\n                let isUpdatingExistingItem = false;\n                const updatedState = state.map(item => {\n                    if (\n                        item.productInfo.category === action.product.productInfo.category &&\n                        item.productInfo.nameIndex === action.product.productInfo.nameIndex\n                    ) {\n                        isUpdatingExistingItem = true;\n                        item.quantity = action.product.quantity;\n                    }\n\n                    return item;\n                });\n\n                return isUpdatingExistingItem ? updatedState : [...state, action.product];\n            }\n            break;\n\n\n\n        default:\n            return [...state];\n    };\n};\n\nexport default cartHandler","import { viewEnum } from \"../actions\";\nimport { ProductInfo } from \"../actions\";\nimport { Category } from \"../actions\";\n\nconst categoryHandler = (state: Array<Category> = [], action: any) => {\n    switch (action.type) {\n        case 'GET_CATEGORIES':\n            return action.categories;\n        case 'SET_CATEGORY':\n\n           if (action.categoryTarget === 'all') {\n               return state.map(category => {\n                   category.isActive = category.name === 'all';\n                   return category;\n               });\n           } else {\n               return state.map(category => {\n                   if (category.name === action.categoryTarget) category.isActive = !category.isActive;\n                   if (category.name === 'all') category.isActive = false;\n                   return category;\n               });\n           }\n        default:\n            return state;\n    }\n};\n\nexport default categoryHandler;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport AppContainer from './containers/App-container';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './reducers'\n\nexport const store = createStore(rootReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppContainer />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nexport type DispatchType = typeof store.dispatch\n\n"],"sourceRoot":""}